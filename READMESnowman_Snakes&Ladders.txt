Daria Vorsina 261081157

q1.java 
- the file containing the java script with multithreading code that generates the output.png image with snowmen and outputs time in milliseconds it takes on an input
- takes as input w, h, t and n 
- w and h: the width height of the outputimage.png
- t: number of threads for executing
- n: the number of snowmen to draw on the canvas
- the output is the outputimage.png with n snowmen randomly generated by t threads
- the output is also time in milliseconds to execute file, which is then stored in data.csv file
- compile and run q1.java w h t n to test it alone

makedata.sh
- Compile and run makedata.sh with optional inputs
- optional inputs are the same as those for the q1.java input: w, h, t, n
- t and n are the bound of a randomly selected number between 1 and the t and n values
- First the file compiles and runs q1.java either with the provided values or the default inputs

- this bash script compiles and runs q1.java with optional inputs
- on inputs of 1, 20, 40, 60, 80 and 100 threads drawing 100 snowmen on a 1024 by 1024 canvas size of outputimage.png, producing output of the milliseconds, single and multithreaded, it took for each input to run
- the expected output in the data.csv is:
Threads,Single-threaded Time,Multi-threaded Time
1,Time to execute: 21 ms,Time to execute: 19 ms
20,Time to execute: 25 ms,Time to execute: 24 ms
40,Time to execute: 23 ms,Time to execute: 22 ms
60,Time to execute: 26 ms,Time to execute: 27 ms
80,Time to execute: 27 ms,Time to execute: 27 ms
100,Time to execute: 33 ms,Time to execute: 28 ms

- the file containing bash script that takes the data outputted from the q1.java file about the runtime in milliseconds of the multi-threaded vs single-threaded runs and stores it in the data.csv file

plotdata.py
- the file containing a python script that uses matplotlib to generate 2 graphs in total, one representation for the single and for the multithreaded runs, plotted data points with tracelines, it is graphed in terms of number of threads vs time. The last graph represents the number of threads (x-axis) vs speedup (y-axis) from running the program on single to multithreaded mode
- speedup  = single runtime (ms) /multithreaded runtime (ms)
- running and compiling plotdata.py results in graphs created from data obtained from an input csv
- the sample data input is the data.csv file created by the makedata.sh file

To test:
test.sh
- run ./test.sh with optional inputs w, h, t, n, as width and height of image, number of threads and number of snowmen respectively
- test will compile and run makedata.sh using either default values of optional input
- test will then compile and run plotdata.py on data.csv
- the result will be 2 graphs showing the performance of threads, and 2 files will be created outputimage.png with snowmen and a data.csv file



q2.java
- compile and run on input of k, j and s as stated in the problem statement
- adder input is k in ms of sleep time
- remover input is j in ms of sleep time
- and input s is game play time in seconds
- tested on input for up to 10 seconds of game time with varied thread sleep times from double to triple digits
- tried adjusting thread sleep time to be much smaller than that of the other thread and vice versa, as well as making both threads sleep for a short or long time.
